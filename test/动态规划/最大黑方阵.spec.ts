import { findSquare } from "@ts/动态规划/最大黑方阵";
import { assert, expect, should } from "chai";

describe("n个骰子的点数", function () {
  it(`[
    [1,0,1],
    [0,0,1],
    [0,0,1]
  ]`, () => {
    expect(
      findSquare([
        [1, 0, 1],
        [0, 0, 1],
        [0, 0, 1],
      ])
    ).to.deep.equal([1, 0, 2]);
  });
  it(`[[0,1,1],[1,0,1],[1,1,0]]`, () => {
    expect(
      findSquare([
        [0, 1, 1],
        [1, 0, 1],
        [1, 1, 0],
      ])
    ).deep.equal([0, 0, 1]);
  });
  it(`[
    [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], 
    [0, 0, 0, 1, 1, 1, 1, 0, 0, 1], 
    [1, 0, 0, 1, 1, 1, 0, 0, 0, 0], 
    [0, 1, 1, 1, 1, 1, 0, 1, 0, 0], 
    [0, 1, 0, 0, 1, 0, 0, 0, 1, 1], 
    [0, 1, 0, 0, 1, 0, 1, 1, 0, 1], 
    [1, 0, 0, 0, 1, 0, 0, 0, 0, 1], 
    [1, 1, 0, 0, 0, 1, 0, 0, 0, 0], 
    [0, 0, 1, 0, 1, 1, 0, 0, 1, 1], 
    [0, 0, 0, 1, 1, 0, 0, 1, 1, 1]
  ]`, () => {
    expect(
      findSquare([
        [0, 0, 0, 1, 0, 0, 1, 1, 1, 1],
        [0, 0, 0, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 1, 1, 1, 1, 1, 0, 1, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0, 1, 1],
        [0, 1, 0, 0, 1, 0, 1, 1, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 0, 0, 1],
        [1, 1, 0, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 1, 1, 0, 0, 1, 1],
        [0, 0, 0, 1, 1, 0, 0, 1, 1, 1],
      ])
    ).deep.equal([0, 0, 2]);
  });
  it(`[
    [1, 1, 1, 1, 0, 1, 0, 1, 1, 1], 
    [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], 
    [1, 1, 1, 1, 0, 1, 0, 1, 0, 1], 
    [1, 1, 1, 1, 0, 0, 0, 0, 0, 0], 
    [1, 0, 1, 0, 1, 1, 1, 1, 1, 1], 
    [1, 1, 0, 0, 1, 0, 1, 0, 0, 1], 
    [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], 
    [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], 
    [1, 0, 1, 0, 1, 1, 0, 1, 1, 1], 
    [1, 1, 1, 0, 1, 0, 0, 1, 1, 1]
  ]`, () => {
    expect(
      findSquare([
        [1, 1, 1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 0, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [1, 0, 1, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 0, 1, 0, 0, 1],
        [0, 0, 0, 1, 1, 1, 0, 1, 0, 1],
        [0, 0, 0, 1, 0, 1, 0, 1, 0, 1],
        [1, 0, 1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 0, 1, 1, 1],
      ])
    ).deep.equal([1, 4, 3]);
  });
  it(`[
    [1, 1, 0, 0, 1, 1, 0, 0, 0, 1],
    [0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
    [1, 1, 1, 1, 0, 1, 1, 1, 0, 1],
    [1, 1, 1, 0, 0, 1, 1, 0, 0, 0],
    [1, 0, 1, 0, 1, 1, 0, 1, 0, 1],
    [0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 0, 0, 1, 1, 0, 1, 1],
    [0, 0, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 1, 1, 1, 0, 1, 0, 0, 0],
    [1, 0, 1, 0, 1, 0, 0, 0, 1, 1]
  ]`, () => {
    expect(
      findSquare([
        [1, 1, 0, 0, 1, 1, 0, 0, 0, 1],
        [0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
        [1, 1, 1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 0, 0, 0],
        [1, 0, 1, 0, 1, 1, 0, 1, 0, 1],
        [0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 0, 0, 1, 1, 0, 1, 1],
        [0, 0, 1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 0, 0, 0],
        [1, 0, 1, 0, 1, 0, 0, 0, 1, 1],
      ])
    ).deep.equal([0, 6, 2]);
  });
});
